name: Full build and publish with versioning
on:
  push:
    tags:
      - "_*" # Push events to matching v*, i.e. v1.0, v20.15.10
permissions:
  contents: write
jobs:
  build-mac:
    # runs-on: macos-latest
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0 # Fetch full history for branches
      
      - name: Keys and certificates
        env:
          APPLE_CERT_DATA: ${{ secrets.APPLE_CERT_DATA }}
          APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
          DEVELOPER_APP_CER: ${{ secrets.DEVELOPER_APP_CER }}
          DEVELOPER_APP_KEY: ${{ secrets.DEVELOPER_APP_KEY }}

          # echo ${{ secrets.APPLE_CERT_DATA }} | base64 --decode > certificate_installer.cer
          # echo ${{ secrets.APPLE_CERT_PASSWORD }} | base64 --decode > certificate_installer.key
          # echo ${{ secrets.DEVELOPER_APP_CER }} | base64 --decode > certificate_application.cer
          # echo ${{ secrets.DEVELOPER_APP_KEY }} | base64 --decode > certificate_application.key
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          echo -n "$APPLE_CERT_DATA" | base64 --decode -o certificate_installer.p12
          echo -n "$DEVELOPER_APP_CER" | base64 --decode -o certificate_application.p12

          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          security create-keychain -p "${{ secrets.APPLE_CERT_PASSWORD }}" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "${{ secrets.APPLE_CERT_PASSWORD }}" $KEYCHAIN_PATH

          security import certificate_installer.p12 -P "${{ secrets.APPLE_CERT_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import certificate_application.p12 -P "${{ secrets.APPLE_CERT_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
  
      - name: Checking out the correct branches for submodules
        run: |
          git submodule foreach '
          if [ "$name" = "pythonCode/submodules/MEDimage" ]; then
            git fetch origin && git checkout -B dev_lab origin/dev_lab && git pull origin dev_lab
          elif [ "$name" = "pythonCode/submodules/MEDprofiles" ]; then
            git fetch origin && git checkout -B fusion_MEDomicsLab origin/fusion_MEDomicsLab && git pull origin fusion_MEDomicsLab
          else
            echo "No branch specified for $name"
          fi
          '
          
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Build go
        run: |
          cd go_server
          go build main.go 
          cd ..

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.13

      - name: Mac OS X with M1 chip
        run: uname -m

      - name: Install dependencies
        run: npm install


      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install dependencies
        run: npm install

      - name: Prebuild libmongocrypt
        run: bash ./utilScripts/libmongocrypt_prebuild.sh

      - name: Update version
        run: |
          node -p "let pkg=require('./package.json'); pkg.version='${GITHUB_REF/refs\/tags\//}'; require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));"
          echo "Version updated to ${GITHUB_REF/refs\/tags\//}"

      # Before building the app, allocate more memory to the shell
      - name: Allocate more memory
        run: export NODE_OPTIONS=--max-old-space-size=8192

      - name: Get tag name
        id: get-tag
        run: |
          VERSION=${GITHUB_REF/refs\/tags\//}
          echo "::set-output name=VERSION::${VERSION#v}"

      - name: Run prebuild script for Mac
        run: npm run prebuild:mac

      - name: Sign all the files
        env: 
          VERSION: ${{ steps.get-tag.outputs.VERSION }}
        run : |
          cp ./utilScripts/sign_files.sh ./sign_files.sh
          chmod +x ./sign_files.sh
          sh ./sign_files.sh ${{ secrets.DEVELOPER_ID_APP }} ${{ env.VERSION }}


      - name: Build for Mac
        run: npm run build:mac-alone

      - name: Sign the .pkg
        env:
          VERSION: ${{ steps.get-tag.outputs.VERSION }}
        run: |
          productsign --sign "${{ secrets.DEVELOPER_ID_INSTALLER }}" ./build/dist/MEDomicsLab-${{ env.VERSION }}-mac.pkg ./build/dist/MEDomicsLab-${{ env.VERSION }}.pkg

      - name: Archive Mac
        uses: actions/upload-artifact@v3
        with:
          name: mac-built
          path: ./build/dist/MEDomicsLab-${{ env.VERSION }}.pkg
        env:
          VERSION: ${{ steps.get-tag.outputs.VERSION }}
  
  notarize-mac:
    needs: [build-mac]
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Mac
        uses: actions/download-artifact@v3
        with:
          name: mac-built

      - name: Get tag name
        id: get-tag
        run: |
          VERSION=${GITHUB_REF/refs\/tags\//}
          echo "::set-output name=VERSION::${VERSION#v}"

      - name: Folder tree
        run: ls -R

      - name: "Notarize and Staple Release Build"
        uses: GuillaumeFalourd/notary-tools@v1
        with:
          product_path: MEDomicsLab-${{ env.VERSION }}.pkg
          apple_id: ${{ secrets.APPLE_NOTARY_USER }}
          password: ${{ secrets.APPLE_NOTARY_PASSWORD }}
          team_id: ${{ secrets.APPLE_TEAM_ID }}
          staple: true
          xcode_path: "/Applications/Xcode.app"
        env:
          VERSION: ${{ steps.get-tag.outputs.VERSION }}

      - name: Archive Mac signed
        uses: actions/upload-artifact@v3
        with:
          name: mac-signed
          path: ./MEDomicsLab-${{ env.VERSION }}.pkg
        env:
          VERSION: ${{ steps.get-tag.outputs.VERSION }}

  # Publish to GitHub
  publish:
    needs: [build-mac, notarize-mac]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Mac
        uses: actions/download-artifact@v3
        with:
          name: mac-signed

      - name: Install zip
        run: sudo apt-get install zip

      - name: Move files out of pythonEnv - to root
        run: |
          mv ./pythonEnv/requirements.txt ./requirements.txt
          mv ./pythonEnv/requirements_mac.txt ./requirements_mac.txt
          mv ./pythonEnv/conda_env_osx64.yml ./conda_env_osx64.yml
          mv ./pythonEnv/create_conda_env_win.bat ./create_conda_env_win.bat
          mv ./pythonEnv/create_conda_env_linux.sh ./create_conda_env_linux.sh
          mv ./pythonEnv/create_conda_env_mac_yml.sh ./create_conda_env_mac_yml.sh
          mv ./pythonEnv/create_conda_env_mac.sh ./create_conda_env_mac.sh
          ls -R

      - name: zip Mac
        run: zip -r MEDomicsLab-PythonEnv-mac.zip ./create_conda_env_mac.sh ./requirements_mac.txt
      - name: Get tag name
        id: get-tag
        run: |
          VERSION=${GITHUB_REF/refs\/tags\//}
          echo "::set-output name=VERSION::${VERSION#v}"

      - name: Publish to GitHub
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./MEDomicsLab-${{ env.VERSION }}-mac.pkg
          name: MEDomicsLab-${{ env.VERSION }}
          body: |
            MEDomicsLab-${{ env.VERSION }}
            This is a full release of MEDomicsLab. This release includes the MEDomicsLab application and the Python environment.
            Refer to the [Documentation](https://medomics-udes.gitbook.io/medomicslab-docs/)
            ${{ github.ref }}
          draft: true
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          VERSION: ${{ steps.get-tag.outputs.VERSION }}
