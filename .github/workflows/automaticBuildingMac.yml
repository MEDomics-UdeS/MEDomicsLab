name: Full build and publish with versioning
on:
  push:
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
permissions:
  contents: write
jobs:
  build-mac:
    runs-on: macos-latest
    # runs-on: self-hosted
    # env:
    #   APPLE_ID: ${{ secrets.APPLE_ID }}
    #   APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
    #   APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0 # Fetch full history for branches
      
      - name: Keys and certificates
        env:
          APPLE_CERT_DATA: ${{ secrets.APPLE_CERT_DATA }}
          APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
          DEVELOPER_APP_CER: ${{ secrets.DEVELOPER_APP_CER }}
          DEVELOPER_APP_KEY: ${{ secrets.DEVELOPER_APP_KEY }}

          # echo ${{ secrets.APPLE_CERT_DATA }} | base64 --decode > certificate_installer.cer
          # echo ${{ secrets.APPLE_CERT_PASSWORD }} | base64 --decode > certificate_installer.key
          # echo ${{ secrets.DEVELOPER_APP_CER }} | base64 --decode > certificate_application.cer
          # echo ${{ secrets.DEVELOPER_APP_KEY }} | base64 --decode > certificate_application.key
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          echo -n "$APPLE_CERT_DATA" | base64 --decode -o certificate_installer.p12
          echo -n "$DEVELOPER_APP_CER" | base64 --decode -o certificate_application.p12

          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          security create-keychain -p "${{ secrets.APPLE_CERT_PASSWORD }}" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "${{ secrets.APPLE_CERT_PASSWORD }}" $KEYCHAIN_PATH

          security import certificate_installer.p12 -P "${{ secrets.APPLE_CERT_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import certificate_application.p12 -P "${{ secrets.APPLE_CERT_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Store as a keychain profile (for signing)

          # Encode the Apple API key to .p8 format
          # echo -n "$APPLE_API_KEY_BASE64" | base64 --decode -o AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8

      - name: keychain profile
        env:
          APPLE_NOTARY_USER: ${{ secrets.APPLE_NOTARY_USER }}
          APPLE_NOTARY_PASSWORD: ${{ secrets.APPLE_NOTARY_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          xcrun notarytool store-credentials "notarytool-password" --apple-id "$APPLE_NOTARY_USER" --team-id "$APPLE_TEAM_ID" --password "$APPLE_NOTARY_PASSWORD"
          
      
      - name: Checking out the correct branches for submodules
        run: |
          git submodule foreach '
          if [ "$name" = "pythonCode/submodules/MEDimage" ]; then
            git fetch origin && git checkout -B dev_lab origin/dev_lab && git pull origin dev_lab
          elif [ "$name" = "pythonCode/submodules/MEDprofiles" ]; then
            git fetch origin && git checkout -B fusion_MEDomicsLab origin/fusion_MEDomicsLab && git pull origin fusion_MEDomicsLab
          else
            echo "No branch specified for $name"
          fi
          '

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Build go
        run: |
          cd go_server
          go build main.go 
          cd ..

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.13

      - name: Mac OS X with M1 chip
        run: uname -m

      - name: Install Python 2.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      
      - name: Bash python version
        run: |
          echo $PATH
          python --version
          which python
        shell: bash -l {0}

      - name: Check if Python2.7 is installed
        run: |
          if ! which python2.7 > /dev/null; then
            curl -O https://www.python.org/ftp/python/2.7.18/python-2.7.18-macosx10.9.pkg
            sudo installer -pkg python-2.7.18-macosx10.9.pkg -target /
          else
            echo "Python 2.7 is already installed"
          fi

      - name: Install dependencies
        run: npm install


      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install dependencies
        run: npm install

      - name: Prebuild libmongocrypt
        run: bash ./utilScripts/libmongocrypt_prebuild.sh

      - name: Update version
        run: |
          node -p "let pkg=require('./package.json'); pkg.version='${GITHUB_REF/refs\/tags\//}'; require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));"
          echo "Version updated to ${GITHUB_REF/refs\/tags\//}"

      # Before building the app, allocate more memory to the shell
      - name: Allocate more memory
        run: export NODE_OPTIONS=--max-old-space-size=8192

      - name: Get tag name
        id: get-tag
        run: |
          VERSION=${GITHUB_REF/refs\/tags\//}
          echo "::set-output name=VERSION::${VERSION#v}"
      
      - name: dotenv file
        run: |
          echo "DEVELOPER_ID_APP=${{ secrets.DEVELOPER_ID_APP }}" >> .env
          echo "DEVELOPER_ID_INSTALLER=${{ secrets.DEVELOPER_ID_INSTALLER }}" >> .env
          
      # - name: Run prebuild script for Mac
      #   run: npm run prebuild:mac

      # - name: Sign all the files
      #   env: 
      #     VERSION: ${{ steps.get-tag.outputs.VERSION }}
      #   run : |
      #     # Recursively sign all files in the specified directories
      #     find . -type f \( -name "*.app" -o -name "*.dylib" -o -name "*.so" -o -name "*.node" \) -exec codesign -s "${{ secrets.DEVELOPER_ID_APP }}" -f --timestamp --options runtime --entitlements ./build/entitlements.mac.plist {} \;

      # - name: Build for Mac
      #   env:
      #     APPLE_ID: ${{ secrets.APPLE_ID }}
      #     APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      #     APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      #   run: |
      #     export APPLE_API_KEY_ID=${{ secrets.APPLE_API_KEY_ID }}
      #     export APPLE_API_ISSUER=${{ secrets.APPLE_API_ISSUER }}
      #     export APPLE_API_KEY=$PWD/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8
      #     npm run build
      
      - name: Build for Mac
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          CSC_INSTALLER_LINK: ${{ secrets.CSC_INSTALLER_LINK }}
          CSC_INSTALLER_KEY_PASSWORD: ${{ secrets.CSC_INSTALLER_KEY_PASSWORD }}
        run: |
          npm run build
  
      - name: notarize
        env:
          VERSION: ${{ steps.get-tag.outputs.VERSION }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          xcrun notarytool submit build/dist/MEDomicsLab-${{ env.VERSION }}-mac.pkg --apple-id $APPLE_ID --password $APPLE_APP_SPECIFIC_PASSWORD --team-id $APPLE_TEAM_ID --wait
      
      # - name: Check signing
      #   run: |
      #     codesign -vvv --deep --strict ./build/dist/mac-arm64/MEDomicsLab.app

            
      # - name: Build for Mac
      #   run: npm run build:mac-alone

      # - name: Sign the .pkg
      #   env:
      #     VERSION: ${{ steps.get-tag.outputs.VERSION }}
      #     DEVELOPER_ID_INSTALLER: ${{ secrets.DEVELOPER_ID_INSTALLER }}
      #   run: |
      #     productsign --sign "$DEVELOPER_ID_INSTALLER" build/dist/MEDomicsLab-${{ env.VERSION }}-mac.pkg build/dist/MEDomicsLab-${{ env.VERSION }}-signed.pkg
      
      # - name: Check signing
      #   continue-on-error: true
      #   env:
      #     VERSION: ${{ steps.get-tag.outputs.VERSION }}
      #   run: |
      #     spctl -a -vvv build/dist/MEDomicsLab-${{ env.VERSION }}-signed.pkg

      # - name: Notarize
      #   continue-on-error: true
      #   env:
      #     VERSION: ${{ steps.get-tag.outputs.VERSION }}
      #   run: |
      #     export DEBUG=electron-notarize*
      #     xcrun notarytool submit -v build/dist/MEDomicsLab-${{ env.VERSION }}-signed.pkg --keychain-profile "notarytool-password"  --wait
      #     xcrun stapler staple build/dist/MEDomicsLab-${{ env.VERSION }}-signed.pkg
      # - name: "Notarize and Staple Release Build"
      #   uses: GuillaumeFalourd/notary-tools@v1
      #   continue-on-error: true  # Added continue-on-error
      #   with:
      #     product_path: ./build/dist/MEDomicsLab-${{ env.VERSION }}-signed.pkg
      #     # product_path: MEDomicsLab-${{ env.VERSION }}.pkg
      #     apple_id: ${{ secrets.APPLE_NOTARY_USER }}
      #     password: ${{ secrets.APPLE_NOTARY_PASSWORD }}
      #     team_id: ${{ secrets.APPLE_TEAM_ID }}
      #     staple: true
      #     xcode_path: "/Applications/Xcode.app"
      #   env:
      #     VERSION: ${{ steps.get-tag.outputs.VERSION }}

      - name: Archive Mac
        uses: actions/upload-artifact@v3
        with:
          name: mac-built
          # path: ./build/dist/MEDomicsLab-${{ env.VERSION }}-signed.pkg
          path: ./build/dist/MEDomicsLab-${{ env.VERSION }}-mac.pkg
        env:
          VERSION: ${{ steps.get-tag.outputs.VERSION }}
  
      # - name: Folder tree
      #   run: ls -R


  # Publish to GitHub
  publish:
    needs: [build-mac]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Mac
        uses: actions/download-artifact@v3
        with:
          name: mac-built
          # name: mac-signed
          
      - name: Install zip
        run: sudo apt-get install zip

      - name: Move files out of pythonEnv - to root
        run: |
          mv ./pythonEnv/requirements.txt ./requirements.txt
          mv ./pythonEnv/requirements_mac.txt ./requirements_mac.txt
          mv ./pythonEnv/conda_env_osx64.yml ./conda_env_osx64.yml
          mv ./pythonEnv/create_conda_env_win.bat ./create_conda_env_win.bat
          mv ./pythonEnv/create_conda_env_linux.sh ./create_conda_env_linux.sh
          mv ./pythonEnv/create_conda_env_mac_yml.sh ./create_conda_env_mac_yml.sh
          mv ./pythonEnv/create_conda_env_mac.sh ./create_conda_env_mac.sh
          ls -R

      - name: zip Mac
        run: zip -r MEDomicsLab-PythonEnv-mac.zip ./create_conda_env_mac.sh ./requirements_mac.txt
      - name: Get tag name
        id: get-tag
        run: |
          VERSION=${GITHUB_REF/refs\/tags\//}
          echo "::set-output name=VERSION::${VERSION#v}"

      - name: Publish to GitHub
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./MEDomicsLab-${{ env.VERSION }}-mac.pkg
          name: MEDomicsLab-${{ env.VERSION }}
          body: |
            MEDomicsLab-${{ env.VERSION }}
            This is a full release of MEDomicsLab. This release includes the MEDomicsLab application and the Python environment.
            Refer to the [Documentation](https://medomics-udes.gitbook.io/medomicslab-docs/)
            ${{ github.ref }}
          draft: true
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          VERSION: ${{ steps.get-tag.outputs.VERSION }}
